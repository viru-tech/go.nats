// Code generated by MockGen. DO NOT EDIT.
// Source: ./vendor/github.com/nats-io/nats.go/jetstream/jetstream.go
//
// Generated by this command:
//
//	mockgen -source=./vendor/github.com/nats-io/nats.go/jetstream/jetstream.go -imports=jetstream=github.com/nats-io/nats.go/jetstream -package=nats -mock_names=JetStream=MockJetStream -destination=jetstream_mock_test.go
//

// Package nats is a generated GoMock package.
package nats

import (
	context "context"
	reflect "reflect"
	time "time"

	nats_go "github.com/nats-io/nats.go"
	jetstream "github.com/nats-io/nats.go/jetstream"
	gomock "go.uber.org/mock/gomock"
)

// MockJetStream is a mock of JetStream interface.
type MockJetStream struct {
	ctrl     *gomock.Controller
	recorder *MockJetStreamMockRecorder
}

// MockJetStreamMockRecorder is the mock recorder for MockJetStream.
type MockJetStreamMockRecorder struct {
	mock *MockJetStream
}

// NewMockJetStream creates a new mock instance.
func NewMockJetStream(ctrl *gomock.Controller) *MockJetStream {
	mock := &MockJetStream{ctrl: ctrl}
	mock.recorder = &MockJetStreamMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJetStream) EXPECT() *MockJetStreamMockRecorder {
	return m.recorder
}

// AccountInfo mocks base method.
func (m *MockJetStream) AccountInfo(ctx context.Context) (*jetstream.AccountInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccountInfo", ctx)
	ret0, _ := ret[0].(*jetstream.AccountInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AccountInfo indicates an expected call of AccountInfo.
func (mr *MockJetStreamMockRecorder) AccountInfo(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccountInfo", reflect.TypeOf((*MockJetStream)(nil).AccountInfo), ctx)
}

// CleanupPublisher mocks base method.
func (m *MockJetStream) CleanupPublisher() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CleanupPublisher")
}

// CleanupPublisher indicates an expected call of CleanupPublisher.
func (mr *MockJetStreamMockRecorder) CleanupPublisher() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanupPublisher", reflect.TypeOf((*MockJetStream)(nil).CleanupPublisher))
}

// Conn mocks base method.
func (m *MockJetStream) Conn() *nats_go.Conn {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Conn")
	ret0, _ := ret[0].(*nats_go.Conn)
	return ret0
}

// Conn indicates an expected call of Conn.
func (mr *MockJetStreamMockRecorder) Conn() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Conn", reflect.TypeOf((*MockJetStream)(nil).Conn))
}

// Consumer mocks base method.
func (m *MockJetStream) Consumer(ctx context.Context, stream, consumer string) (jetstream.Consumer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Consumer", ctx, stream, consumer)
	ret0, _ := ret[0].(jetstream.Consumer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Consumer indicates an expected call of Consumer.
func (mr *MockJetStreamMockRecorder) Consumer(ctx, stream, consumer any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Consumer", reflect.TypeOf((*MockJetStream)(nil).Consumer), ctx, stream, consumer)
}

// CreateConsumer mocks base method.
func (m *MockJetStream) CreateConsumer(ctx context.Context, stream string, cfg jetstream.ConsumerConfig) (jetstream.Consumer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateConsumer", ctx, stream, cfg)
	ret0, _ := ret[0].(jetstream.Consumer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateConsumer indicates an expected call of CreateConsumer.
func (mr *MockJetStreamMockRecorder) CreateConsumer(ctx, stream, cfg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConsumer", reflect.TypeOf((*MockJetStream)(nil).CreateConsumer), ctx, stream, cfg)
}

// CreateKeyValue mocks base method.
func (m *MockJetStream) CreateKeyValue(ctx context.Context, cfg jetstream.KeyValueConfig) (jetstream.KeyValue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateKeyValue", ctx, cfg)
	ret0, _ := ret[0].(jetstream.KeyValue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateKeyValue indicates an expected call of CreateKeyValue.
func (mr *MockJetStreamMockRecorder) CreateKeyValue(ctx, cfg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKeyValue", reflect.TypeOf((*MockJetStream)(nil).CreateKeyValue), ctx, cfg)
}

// CreateObjectStore mocks base method.
func (m *MockJetStream) CreateObjectStore(ctx context.Context, cfg jetstream.ObjectStoreConfig) (jetstream.ObjectStore, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateObjectStore", ctx, cfg)
	ret0, _ := ret[0].(jetstream.ObjectStore)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateObjectStore indicates an expected call of CreateObjectStore.
func (mr *MockJetStreamMockRecorder) CreateObjectStore(ctx, cfg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateObjectStore", reflect.TypeOf((*MockJetStream)(nil).CreateObjectStore), ctx, cfg)
}

// CreateOrUpdateConsumer mocks base method.
func (m *MockJetStream) CreateOrUpdateConsumer(ctx context.Context, stream string, cfg jetstream.ConsumerConfig) (jetstream.Consumer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdateConsumer", ctx, stream, cfg)
	ret0, _ := ret[0].(jetstream.Consumer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdateConsumer indicates an expected call of CreateOrUpdateConsumer.
func (mr *MockJetStreamMockRecorder) CreateOrUpdateConsumer(ctx, stream, cfg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateConsumer", reflect.TypeOf((*MockJetStream)(nil).CreateOrUpdateConsumer), ctx, stream, cfg)
}

// CreateOrUpdateKeyValue mocks base method.
func (m *MockJetStream) CreateOrUpdateKeyValue(ctx context.Context, cfg jetstream.KeyValueConfig) (jetstream.KeyValue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdateKeyValue", ctx, cfg)
	ret0, _ := ret[0].(jetstream.KeyValue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdateKeyValue indicates an expected call of CreateOrUpdateKeyValue.
func (mr *MockJetStreamMockRecorder) CreateOrUpdateKeyValue(ctx, cfg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateKeyValue", reflect.TypeOf((*MockJetStream)(nil).CreateOrUpdateKeyValue), ctx, cfg)
}

// CreateOrUpdateObjectStore mocks base method.
func (m *MockJetStream) CreateOrUpdateObjectStore(ctx context.Context, cfg jetstream.ObjectStoreConfig) (jetstream.ObjectStore, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdateObjectStore", ctx, cfg)
	ret0, _ := ret[0].(jetstream.ObjectStore)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdateObjectStore indicates an expected call of CreateOrUpdateObjectStore.
func (mr *MockJetStreamMockRecorder) CreateOrUpdateObjectStore(ctx, cfg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateObjectStore", reflect.TypeOf((*MockJetStream)(nil).CreateOrUpdateObjectStore), ctx, cfg)
}

// CreateOrUpdatePushConsumer mocks base method.
func (m *MockJetStream) CreateOrUpdatePushConsumer(ctx context.Context, stream string, cfg jetstream.ConsumerConfig) (jetstream.PushConsumer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdatePushConsumer", ctx, stream, cfg)
	ret0, _ := ret[0].(jetstream.PushConsumer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdatePushConsumer indicates an expected call of CreateOrUpdatePushConsumer.
func (mr *MockJetStreamMockRecorder) CreateOrUpdatePushConsumer(ctx, stream, cfg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdatePushConsumer", reflect.TypeOf((*MockJetStream)(nil).CreateOrUpdatePushConsumer), ctx, stream, cfg)
}

// CreateOrUpdateStream mocks base method.
func (m *MockJetStream) CreateOrUpdateStream(ctx context.Context, cfg jetstream.StreamConfig) (jetstream.Stream, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdateStream", ctx, cfg)
	ret0, _ := ret[0].(jetstream.Stream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdateStream indicates an expected call of CreateOrUpdateStream.
func (mr *MockJetStreamMockRecorder) CreateOrUpdateStream(ctx, cfg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateStream", reflect.TypeOf((*MockJetStream)(nil).CreateOrUpdateStream), ctx, cfg)
}

// CreatePushConsumer mocks base method.
func (m *MockJetStream) CreatePushConsumer(ctx context.Context, stream string, cfg jetstream.ConsumerConfig) (jetstream.PushConsumer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePushConsumer", ctx, stream, cfg)
	ret0, _ := ret[0].(jetstream.PushConsumer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePushConsumer indicates an expected call of CreatePushConsumer.
func (mr *MockJetStreamMockRecorder) CreatePushConsumer(ctx, stream, cfg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePushConsumer", reflect.TypeOf((*MockJetStream)(nil).CreatePushConsumer), ctx, stream, cfg)
}

// CreateStream mocks base method.
func (m *MockJetStream) CreateStream(ctx context.Context, cfg jetstream.StreamConfig) (jetstream.Stream, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStream", ctx, cfg)
	ret0, _ := ret[0].(jetstream.Stream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStream indicates an expected call of CreateStream.
func (mr *MockJetStreamMockRecorder) CreateStream(ctx, cfg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStream", reflect.TypeOf((*MockJetStream)(nil).CreateStream), ctx, cfg)
}

// DeleteConsumer mocks base method.
func (m *MockJetStream) DeleteConsumer(ctx context.Context, stream, consumer string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteConsumer", ctx, stream, consumer)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteConsumer indicates an expected call of DeleteConsumer.
func (mr *MockJetStreamMockRecorder) DeleteConsumer(ctx, stream, consumer any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConsumer", reflect.TypeOf((*MockJetStream)(nil).DeleteConsumer), ctx, stream, consumer)
}

// DeleteKeyValue mocks base method.
func (m *MockJetStream) DeleteKeyValue(ctx context.Context, bucket string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteKeyValue", ctx, bucket)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteKeyValue indicates an expected call of DeleteKeyValue.
func (mr *MockJetStreamMockRecorder) DeleteKeyValue(ctx, bucket any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteKeyValue", reflect.TypeOf((*MockJetStream)(nil).DeleteKeyValue), ctx, bucket)
}

// DeleteObjectStore mocks base method.
func (m *MockJetStream) DeleteObjectStore(ctx context.Context, bucket string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteObjectStore", ctx, bucket)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteObjectStore indicates an expected call of DeleteObjectStore.
func (mr *MockJetStreamMockRecorder) DeleteObjectStore(ctx, bucket any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteObjectStore", reflect.TypeOf((*MockJetStream)(nil).DeleteObjectStore), ctx, bucket)
}

// DeleteStream mocks base method.
func (m *MockJetStream) DeleteStream(ctx context.Context, stream string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStream", ctx, stream)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteStream indicates an expected call of DeleteStream.
func (mr *MockJetStreamMockRecorder) DeleteStream(ctx, stream any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStream", reflect.TypeOf((*MockJetStream)(nil).DeleteStream), ctx, stream)
}

// KeyValue mocks base method.
func (m *MockJetStream) KeyValue(ctx context.Context, bucket string) (jetstream.KeyValue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KeyValue", ctx, bucket)
	ret0, _ := ret[0].(jetstream.KeyValue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// KeyValue indicates an expected call of KeyValue.
func (mr *MockJetStreamMockRecorder) KeyValue(ctx, bucket any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KeyValue", reflect.TypeOf((*MockJetStream)(nil).KeyValue), ctx, bucket)
}

// KeyValueStoreNames mocks base method.
func (m *MockJetStream) KeyValueStoreNames(ctx context.Context) jetstream.KeyValueNamesLister {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KeyValueStoreNames", ctx)
	ret0, _ := ret[0].(jetstream.KeyValueNamesLister)
	return ret0
}

// KeyValueStoreNames indicates an expected call of KeyValueStoreNames.
func (mr *MockJetStreamMockRecorder) KeyValueStoreNames(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KeyValueStoreNames", reflect.TypeOf((*MockJetStream)(nil).KeyValueStoreNames), ctx)
}

// KeyValueStores mocks base method.
func (m *MockJetStream) KeyValueStores(ctx context.Context) jetstream.KeyValueLister {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KeyValueStores", ctx)
	ret0, _ := ret[0].(jetstream.KeyValueLister)
	return ret0
}

// KeyValueStores indicates an expected call of KeyValueStores.
func (mr *MockJetStreamMockRecorder) KeyValueStores(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KeyValueStores", reflect.TypeOf((*MockJetStream)(nil).KeyValueStores), ctx)
}

// ListStreams mocks base method.
func (m *MockJetStream) ListStreams(arg0 context.Context, arg1 ...jetstream.StreamListOpt) jetstream.StreamInfoLister {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListStreams", varargs...)
	ret0, _ := ret[0].(jetstream.StreamInfoLister)
	return ret0
}

// ListStreams indicates an expected call of ListStreams.
func (mr *MockJetStreamMockRecorder) ListStreams(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStreams", reflect.TypeOf((*MockJetStream)(nil).ListStreams), varargs...)
}

// ObjectStore mocks base method.
func (m *MockJetStream) ObjectStore(ctx context.Context, bucket string) (jetstream.ObjectStore, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ObjectStore", ctx, bucket)
	ret0, _ := ret[0].(jetstream.ObjectStore)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ObjectStore indicates an expected call of ObjectStore.
func (mr *MockJetStreamMockRecorder) ObjectStore(ctx, bucket any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObjectStore", reflect.TypeOf((*MockJetStream)(nil).ObjectStore), ctx, bucket)
}

// ObjectStoreNames mocks base method.
func (m *MockJetStream) ObjectStoreNames(ctx context.Context) jetstream.ObjectStoreNamesLister {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ObjectStoreNames", ctx)
	ret0, _ := ret[0].(jetstream.ObjectStoreNamesLister)
	return ret0
}

// ObjectStoreNames indicates an expected call of ObjectStoreNames.
func (mr *MockJetStreamMockRecorder) ObjectStoreNames(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObjectStoreNames", reflect.TypeOf((*MockJetStream)(nil).ObjectStoreNames), ctx)
}

// ObjectStores mocks base method.
func (m *MockJetStream) ObjectStores(ctx context.Context) jetstream.ObjectStoresLister {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ObjectStores", ctx)
	ret0, _ := ret[0].(jetstream.ObjectStoresLister)
	return ret0
}

// ObjectStores indicates an expected call of ObjectStores.
func (mr *MockJetStreamMockRecorder) ObjectStores(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObjectStores", reflect.TypeOf((*MockJetStream)(nil).ObjectStores), ctx)
}

// Options mocks base method.
func (m *MockJetStream) Options() jetstream.JetStreamOptions {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Options")
	ret0, _ := ret[0].(jetstream.JetStreamOptions)
	return ret0
}

// Options indicates an expected call of Options.
func (mr *MockJetStreamMockRecorder) Options() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Options", reflect.TypeOf((*MockJetStream)(nil).Options))
}

// OrderedConsumer mocks base method.
func (m *MockJetStream) OrderedConsumer(ctx context.Context, stream string, cfg jetstream.OrderedConsumerConfig) (jetstream.Consumer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrderedConsumer", ctx, stream, cfg)
	ret0, _ := ret[0].(jetstream.Consumer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OrderedConsumer indicates an expected call of OrderedConsumer.
func (mr *MockJetStreamMockRecorder) OrderedConsumer(ctx, stream, cfg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrderedConsumer", reflect.TypeOf((*MockJetStream)(nil).OrderedConsumer), ctx, stream, cfg)
}

// PauseConsumer mocks base method.
func (m *MockJetStream) PauseConsumer(ctx context.Context, stream, consumer string, pauseUntil time.Time) (*jetstream.ConsumerPauseResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PauseConsumer", ctx, stream, consumer, pauseUntil)
	ret0, _ := ret[0].(*jetstream.ConsumerPauseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PauseConsumer indicates an expected call of PauseConsumer.
func (mr *MockJetStreamMockRecorder) PauseConsumer(ctx, stream, consumer, pauseUntil any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PauseConsumer", reflect.TypeOf((*MockJetStream)(nil).PauseConsumer), ctx, stream, consumer, pauseUntil)
}

// Publish mocks base method.
func (m *MockJetStream) Publish(ctx context.Context, subject string, payload []byte, opts ...jetstream.PublishOpt) (*jetstream.PubAck, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, subject, payload}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Publish", varargs...)
	ret0, _ := ret[0].(*jetstream.PubAck)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Publish indicates an expected call of Publish.
func (mr *MockJetStreamMockRecorder) Publish(ctx, subject, payload any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, subject, payload}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockJetStream)(nil).Publish), varargs...)
}

// PublishAsync mocks base method.
func (m *MockJetStream) PublishAsync(subject string, payload []byte, opts ...jetstream.PublishOpt) (jetstream.PubAckFuture, error) {
	m.ctrl.T.Helper()
	varargs := []any{subject, payload}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PublishAsync", varargs...)
	ret0, _ := ret[0].(jetstream.PubAckFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PublishAsync indicates an expected call of PublishAsync.
func (mr *MockJetStreamMockRecorder) PublishAsync(subject, payload any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{subject, payload}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishAsync", reflect.TypeOf((*MockJetStream)(nil).PublishAsync), varargs...)
}

// PublishAsyncComplete mocks base method.
func (m *MockJetStream) PublishAsyncComplete() <-chan struct{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishAsyncComplete")
	ret0, _ := ret[0].(<-chan struct{})
	return ret0
}

// PublishAsyncComplete indicates an expected call of PublishAsyncComplete.
func (mr *MockJetStreamMockRecorder) PublishAsyncComplete() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishAsyncComplete", reflect.TypeOf((*MockJetStream)(nil).PublishAsyncComplete))
}

// PublishAsyncPending mocks base method.
func (m *MockJetStream) PublishAsyncPending() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishAsyncPending")
	ret0, _ := ret[0].(int)
	return ret0
}

// PublishAsyncPending indicates an expected call of PublishAsyncPending.
func (mr *MockJetStreamMockRecorder) PublishAsyncPending() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishAsyncPending", reflect.TypeOf((*MockJetStream)(nil).PublishAsyncPending))
}

// PublishMsg mocks base method.
func (m *MockJetStream) PublishMsg(ctx context.Context, msg *nats_go.Msg, opts ...jetstream.PublishOpt) (*jetstream.PubAck, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, msg}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PublishMsg", varargs...)
	ret0, _ := ret[0].(*jetstream.PubAck)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PublishMsg indicates an expected call of PublishMsg.
func (mr *MockJetStreamMockRecorder) PublishMsg(ctx, msg any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, msg}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishMsg", reflect.TypeOf((*MockJetStream)(nil).PublishMsg), varargs...)
}

// PublishMsgAsync mocks base method.
func (m *MockJetStream) PublishMsgAsync(msg *nats_go.Msg, opts ...jetstream.PublishOpt) (jetstream.PubAckFuture, error) {
	m.ctrl.T.Helper()
	varargs := []any{msg}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PublishMsgAsync", varargs...)
	ret0, _ := ret[0].(jetstream.PubAckFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PublishMsgAsync indicates an expected call of PublishMsgAsync.
func (mr *MockJetStreamMockRecorder) PublishMsgAsync(msg any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{msg}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishMsgAsync", reflect.TypeOf((*MockJetStream)(nil).PublishMsgAsync), varargs...)
}

// PushConsumer mocks base method.
func (m *MockJetStream) PushConsumer(ctx context.Context, stream, consumer string) (jetstream.PushConsumer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PushConsumer", ctx, stream, consumer)
	ret0, _ := ret[0].(jetstream.PushConsumer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PushConsumer indicates an expected call of PushConsumer.
func (mr *MockJetStreamMockRecorder) PushConsumer(ctx, stream, consumer any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PushConsumer", reflect.TypeOf((*MockJetStream)(nil).PushConsumer), ctx, stream, consumer)
}

// ResumeConsumer mocks base method.
func (m *MockJetStream) ResumeConsumer(ctx context.Context, stream, consumer string) (*jetstream.ConsumerPauseResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResumeConsumer", ctx, stream, consumer)
	ret0, _ := ret[0].(*jetstream.ConsumerPauseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResumeConsumer indicates an expected call of ResumeConsumer.
func (mr *MockJetStreamMockRecorder) ResumeConsumer(ctx, stream, consumer any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResumeConsumer", reflect.TypeOf((*MockJetStream)(nil).ResumeConsumer), ctx, stream, consumer)
}

// Stream mocks base method.
func (m *MockJetStream) Stream(ctx context.Context, stream string) (jetstream.Stream, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stream", ctx, stream)
	ret0, _ := ret[0].(jetstream.Stream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stream indicates an expected call of Stream.
func (mr *MockJetStreamMockRecorder) Stream(ctx, stream any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stream", reflect.TypeOf((*MockJetStream)(nil).Stream), ctx, stream)
}

// StreamNameBySubject mocks base method.
func (m *MockJetStream) StreamNameBySubject(ctx context.Context, subject string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StreamNameBySubject", ctx, subject)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StreamNameBySubject indicates an expected call of StreamNameBySubject.
func (mr *MockJetStreamMockRecorder) StreamNameBySubject(ctx, subject any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamNameBySubject", reflect.TypeOf((*MockJetStream)(nil).StreamNameBySubject), ctx, subject)
}

// StreamNames mocks base method.
func (m *MockJetStream) StreamNames(arg0 context.Context, arg1 ...jetstream.StreamListOpt) jetstream.StreamNameLister {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StreamNames", varargs...)
	ret0, _ := ret[0].(jetstream.StreamNameLister)
	return ret0
}

// StreamNames indicates an expected call of StreamNames.
func (mr *MockJetStreamMockRecorder) StreamNames(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamNames", reflect.TypeOf((*MockJetStream)(nil).StreamNames), varargs...)
}

// UpdateConsumer mocks base method.
func (m *MockJetStream) UpdateConsumer(ctx context.Context, stream string, cfg jetstream.ConsumerConfig) (jetstream.Consumer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateConsumer", ctx, stream, cfg)
	ret0, _ := ret[0].(jetstream.Consumer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateConsumer indicates an expected call of UpdateConsumer.
func (mr *MockJetStreamMockRecorder) UpdateConsumer(ctx, stream, cfg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConsumer", reflect.TypeOf((*MockJetStream)(nil).UpdateConsumer), ctx, stream, cfg)
}

// UpdateKeyValue mocks base method.
func (m *MockJetStream) UpdateKeyValue(ctx context.Context, cfg jetstream.KeyValueConfig) (jetstream.KeyValue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateKeyValue", ctx, cfg)
	ret0, _ := ret[0].(jetstream.KeyValue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateKeyValue indicates an expected call of UpdateKeyValue.
func (mr *MockJetStreamMockRecorder) UpdateKeyValue(ctx, cfg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateKeyValue", reflect.TypeOf((*MockJetStream)(nil).UpdateKeyValue), ctx, cfg)
}

// UpdateObjectStore mocks base method.
func (m *MockJetStream) UpdateObjectStore(ctx context.Context, cfg jetstream.ObjectStoreConfig) (jetstream.ObjectStore, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateObjectStore", ctx, cfg)
	ret0, _ := ret[0].(jetstream.ObjectStore)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateObjectStore indicates an expected call of UpdateObjectStore.
func (mr *MockJetStreamMockRecorder) UpdateObjectStore(ctx, cfg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateObjectStore", reflect.TypeOf((*MockJetStream)(nil).UpdateObjectStore), ctx, cfg)
}

// UpdatePushConsumer mocks base method.
func (m *MockJetStream) UpdatePushConsumer(ctx context.Context, stream string, cfg jetstream.ConsumerConfig) (jetstream.PushConsumer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePushConsumer", ctx, stream, cfg)
	ret0, _ := ret[0].(jetstream.PushConsumer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePushConsumer indicates an expected call of UpdatePushConsumer.
func (mr *MockJetStreamMockRecorder) UpdatePushConsumer(ctx, stream, cfg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePushConsumer", reflect.TypeOf((*MockJetStream)(nil).UpdatePushConsumer), ctx, stream, cfg)
}

// UpdateStream mocks base method.
func (m *MockJetStream) UpdateStream(ctx context.Context, cfg jetstream.StreamConfig) (jetstream.Stream, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStream", ctx, cfg)
	ret0, _ := ret[0].(jetstream.Stream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStream indicates an expected call of UpdateStream.
func (mr *MockJetStreamMockRecorder) UpdateStream(ctx, cfg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStream", reflect.TypeOf((*MockJetStream)(nil).UpdateStream), ctx, cfg)
}

// MockPublisher is a mock of Publisher interface.
type MockPublisher struct {
	ctrl     *gomock.Controller
	recorder *MockPublisherMockRecorder
}

// MockPublisherMockRecorder is the mock recorder for MockPublisher.
type MockPublisherMockRecorder struct {
	mock *MockPublisher
}

// NewMockPublisher creates a new mock instance.
func NewMockPublisher(ctrl *gomock.Controller) *MockPublisher {
	mock := &MockPublisher{ctrl: ctrl}
	mock.recorder = &MockPublisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPublisher) EXPECT() *MockPublisherMockRecorder {
	return m.recorder
}

// CleanupPublisher mocks base method.
func (m *MockPublisher) CleanupPublisher() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CleanupPublisher")
}

// CleanupPublisher indicates an expected call of CleanupPublisher.
func (mr *MockPublisherMockRecorder) CleanupPublisher() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanupPublisher", reflect.TypeOf((*MockPublisher)(nil).CleanupPublisher))
}

// Publish mocks base method.
func (m *MockPublisher) Publish(ctx context.Context, subject string, payload []byte, opts ...jetstream.PublishOpt) (*jetstream.PubAck, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, subject, payload}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Publish", varargs...)
	ret0, _ := ret[0].(*jetstream.PubAck)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Publish indicates an expected call of Publish.
func (mr *MockPublisherMockRecorder) Publish(ctx, subject, payload any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, subject, payload}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockPublisher)(nil).Publish), varargs...)
}

// PublishAsync mocks base method.
func (m *MockPublisher) PublishAsync(subject string, payload []byte, opts ...jetstream.PublishOpt) (jetstream.PubAckFuture, error) {
	m.ctrl.T.Helper()
	varargs := []any{subject, payload}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PublishAsync", varargs...)
	ret0, _ := ret[0].(jetstream.PubAckFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PublishAsync indicates an expected call of PublishAsync.
func (mr *MockPublisherMockRecorder) PublishAsync(subject, payload any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{subject, payload}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishAsync", reflect.TypeOf((*MockPublisher)(nil).PublishAsync), varargs...)
}

// PublishAsyncComplete mocks base method.
func (m *MockPublisher) PublishAsyncComplete() <-chan struct{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishAsyncComplete")
	ret0, _ := ret[0].(<-chan struct{})
	return ret0
}

// PublishAsyncComplete indicates an expected call of PublishAsyncComplete.
func (mr *MockPublisherMockRecorder) PublishAsyncComplete() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishAsyncComplete", reflect.TypeOf((*MockPublisher)(nil).PublishAsyncComplete))
}

// PublishAsyncPending mocks base method.
func (m *MockPublisher) PublishAsyncPending() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishAsyncPending")
	ret0, _ := ret[0].(int)
	return ret0
}

// PublishAsyncPending indicates an expected call of PublishAsyncPending.
func (mr *MockPublisherMockRecorder) PublishAsyncPending() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishAsyncPending", reflect.TypeOf((*MockPublisher)(nil).PublishAsyncPending))
}

// PublishMsg mocks base method.
func (m *MockPublisher) PublishMsg(ctx context.Context, msg *nats_go.Msg, opts ...jetstream.PublishOpt) (*jetstream.PubAck, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, msg}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PublishMsg", varargs...)
	ret0, _ := ret[0].(*jetstream.PubAck)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PublishMsg indicates an expected call of PublishMsg.
func (mr *MockPublisherMockRecorder) PublishMsg(ctx, msg any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, msg}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishMsg", reflect.TypeOf((*MockPublisher)(nil).PublishMsg), varargs...)
}

// PublishMsgAsync mocks base method.
func (m *MockPublisher) PublishMsgAsync(msg *nats_go.Msg, opts ...jetstream.PublishOpt) (jetstream.PubAckFuture, error) {
	m.ctrl.T.Helper()
	varargs := []any{msg}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PublishMsgAsync", varargs...)
	ret0, _ := ret[0].(jetstream.PubAckFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PublishMsgAsync indicates an expected call of PublishMsgAsync.
func (mr *MockPublisherMockRecorder) PublishMsgAsync(msg any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{msg}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishMsgAsync", reflect.TypeOf((*MockPublisher)(nil).PublishMsgAsync), varargs...)
}

// MockStreamManager is a mock of StreamManager interface.
type MockStreamManager struct {
	ctrl     *gomock.Controller
	recorder *MockStreamManagerMockRecorder
}

// MockStreamManagerMockRecorder is the mock recorder for MockStreamManager.
type MockStreamManagerMockRecorder struct {
	mock *MockStreamManager
}

// NewMockStreamManager creates a new mock instance.
func NewMockStreamManager(ctrl *gomock.Controller) *MockStreamManager {
	mock := &MockStreamManager{ctrl: ctrl}
	mock.recorder = &MockStreamManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStreamManager) EXPECT() *MockStreamManagerMockRecorder {
	return m.recorder
}

// CreateOrUpdateStream mocks base method.
func (m *MockStreamManager) CreateOrUpdateStream(ctx context.Context, cfg jetstream.StreamConfig) (jetstream.Stream, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdateStream", ctx, cfg)
	ret0, _ := ret[0].(jetstream.Stream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdateStream indicates an expected call of CreateOrUpdateStream.
func (mr *MockStreamManagerMockRecorder) CreateOrUpdateStream(ctx, cfg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateStream", reflect.TypeOf((*MockStreamManager)(nil).CreateOrUpdateStream), ctx, cfg)
}

// CreateStream mocks base method.
func (m *MockStreamManager) CreateStream(ctx context.Context, cfg jetstream.StreamConfig) (jetstream.Stream, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStream", ctx, cfg)
	ret0, _ := ret[0].(jetstream.Stream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStream indicates an expected call of CreateStream.
func (mr *MockStreamManagerMockRecorder) CreateStream(ctx, cfg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStream", reflect.TypeOf((*MockStreamManager)(nil).CreateStream), ctx, cfg)
}

// DeleteStream mocks base method.
func (m *MockStreamManager) DeleteStream(ctx context.Context, stream string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStream", ctx, stream)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteStream indicates an expected call of DeleteStream.
func (mr *MockStreamManagerMockRecorder) DeleteStream(ctx, stream any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStream", reflect.TypeOf((*MockStreamManager)(nil).DeleteStream), ctx, stream)
}

// ListStreams mocks base method.
func (m *MockStreamManager) ListStreams(arg0 context.Context, arg1 ...jetstream.StreamListOpt) jetstream.StreamInfoLister {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListStreams", varargs...)
	ret0, _ := ret[0].(jetstream.StreamInfoLister)
	return ret0
}

// ListStreams indicates an expected call of ListStreams.
func (mr *MockStreamManagerMockRecorder) ListStreams(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStreams", reflect.TypeOf((*MockStreamManager)(nil).ListStreams), varargs...)
}

// Stream mocks base method.
func (m *MockStreamManager) Stream(ctx context.Context, stream string) (jetstream.Stream, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stream", ctx, stream)
	ret0, _ := ret[0].(jetstream.Stream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stream indicates an expected call of Stream.
func (mr *MockStreamManagerMockRecorder) Stream(ctx, stream any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stream", reflect.TypeOf((*MockStreamManager)(nil).Stream), ctx, stream)
}

// StreamNameBySubject mocks base method.
func (m *MockStreamManager) StreamNameBySubject(ctx context.Context, subject string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StreamNameBySubject", ctx, subject)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StreamNameBySubject indicates an expected call of StreamNameBySubject.
func (mr *MockStreamManagerMockRecorder) StreamNameBySubject(ctx, subject any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamNameBySubject", reflect.TypeOf((*MockStreamManager)(nil).StreamNameBySubject), ctx, subject)
}

// StreamNames mocks base method.
func (m *MockStreamManager) StreamNames(arg0 context.Context, arg1 ...jetstream.StreamListOpt) jetstream.StreamNameLister {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StreamNames", varargs...)
	ret0, _ := ret[0].(jetstream.StreamNameLister)
	return ret0
}

// StreamNames indicates an expected call of StreamNames.
func (mr *MockStreamManagerMockRecorder) StreamNames(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamNames", reflect.TypeOf((*MockStreamManager)(nil).StreamNames), varargs...)
}

// UpdateStream mocks base method.
func (m *MockStreamManager) UpdateStream(ctx context.Context, cfg jetstream.StreamConfig) (jetstream.Stream, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStream", ctx, cfg)
	ret0, _ := ret[0].(jetstream.Stream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStream indicates an expected call of UpdateStream.
func (mr *MockStreamManagerMockRecorder) UpdateStream(ctx, cfg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStream", reflect.TypeOf((*MockStreamManager)(nil).UpdateStream), ctx, cfg)
}

// MockStreamConsumerManager is a mock of StreamConsumerManager interface.
type MockStreamConsumerManager struct {
	ctrl     *gomock.Controller
	recorder *MockStreamConsumerManagerMockRecorder
}

// MockStreamConsumerManagerMockRecorder is the mock recorder for MockStreamConsumerManager.
type MockStreamConsumerManagerMockRecorder struct {
	mock *MockStreamConsumerManager
}

// NewMockStreamConsumerManager creates a new mock instance.
func NewMockStreamConsumerManager(ctrl *gomock.Controller) *MockStreamConsumerManager {
	mock := &MockStreamConsumerManager{ctrl: ctrl}
	mock.recorder = &MockStreamConsumerManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStreamConsumerManager) EXPECT() *MockStreamConsumerManagerMockRecorder {
	return m.recorder
}

// Consumer mocks base method.
func (m *MockStreamConsumerManager) Consumer(ctx context.Context, stream, consumer string) (jetstream.Consumer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Consumer", ctx, stream, consumer)
	ret0, _ := ret[0].(jetstream.Consumer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Consumer indicates an expected call of Consumer.
func (mr *MockStreamConsumerManagerMockRecorder) Consumer(ctx, stream, consumer any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Consumer", reflect.TypeOf((*MockStreamConsumerManager)(nil).Consumer), ctx, stream, consumer)
}

// CreateConsumer mocks base method.
func (m *MockStreamConsumerManager) CreateConsumer(ctx context.Context, stream string, cfg jetstream.ConsumerConfig) (jetstream.Consumer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateConsumer", ctx, stream, cfg)
	ret0, _ := ret[0].(jetstream.Consumer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateConsumer indicates an expected call of CreateConsumer.
func (mr *MockStreamConsumerManagerMockRecorder) CreateConsumer(ctx, stream, cfg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConsumer", reflect.TypeOf((*MockStreamConsumerManager)(nil).CreateConsumer), ctx, stream, cfg)
}

// CreateOrUpdateConsumer mocks base method.
func (m *MockStreamConsumerManager) CreateOrUpdateConsumer(ctx context.Context, stream string, cfg jetstream.ConsumerConfig) (jetstream.Consumer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdateConsumer", ctx, stream, cfg)
	ret0, _ := ret[0].(jetstream.Consumer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdateConsumer indicates an expected call of CreateOrUpdateConsumer.
func (mr *MockStreamConsumerManagerMockRecorder) CreateOrUpdateConsumer(ctx, stream, cfg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateConsumer", reflect.TypeOf((*MockStreamConsumerManager)(nil).CreateOrUpdateConsumer), ctx, stream, cfg)
}

// CreateOrUpdatePushConsumer mocks base method.
func (m *MockStreamConsumerManager) CreateOrUpdatePushConsumer(ctx context.Context, stream string, cfg jetstream.ConsumerConfig) (jetstream.PushConsumer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdatePushConsumer", ctx, stream, cfg)
	ret0, _ := ret[0].(jetstream.PushConsumer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdatePushConsumer indicates an expected call of CreateOrUpdatePushConsumer.
func (mr *MockStreamConsumerManagerMockRecorder) CreateOrUpdatePushConsumer(ctx, stream, cfg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdatePushConsumer", reflect.TypeOf((*MockStreamConsumerManager)(nil).CreateOrUpdatePushConsumer), ctx, stream, cfg)
}

// CreatePushConsumer mocks base method.
func (m *MockStreamConsumerManager) CreatePushConsumer(ctx context.Context, stream string, cfg jetstream.ConsumerConfig) (jetstream.PushConsumer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePushConsumer", ctx, stream, cfg)
	ret0, _ := ret[0].(jetstream.PushConsumer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePushConsumer indicates an expected call of CreatePushConsumer.
func (mr *MockStreamConsumerManagerMockRecorder) CreatePushConsumer(ctx, stream, cfg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePushConsumer", reflect.TypeOf((*MockStreamConsumerManager)(nil).CreatePushConsumer), ctx, stream, cfg)
}

// DeleteConsumer mocks base method.
func (m *MockStreamConsumerManager) DeleteConsumer(ctx context.Context, stream, consumer string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteConsumer", ctx, stream, consumer)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteConsumer indicates an expected call of DeleteConsumer.
func (mr *MockStreamConsumerManagerMockRecorder) DeleteConsumer(ctx, stream, consumer any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConsumer", reflect.TypeOf((*MockStreamConsumerManager)(nil).DeleteConsumer), ctx, stream, consumer)
}

// OrderedConsumer mocks base method.
func (m *MockStreamConsumerManager) OrderedConsumer(ctx context.Context, stream string, cfg jetstream.OrderedConsumerConfig) (jetstream.Consumer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrderedConsumer", ctx, stream, cfg)
	ret0, _ := ret[0].(jetstream.Consumer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OrderedConsumer indicates an expected call of OrderedConsumer.
func (mr *MockStreamConsumerManagerMockRecorder) OrderedConsumer(ctx, stream, cfg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrderedConsumer", reflect.TypeOf((*MockStreamConsumerManager)(nil).OrderedConsumer), ctx, stream, cfg)
}

// PauseConsumer mocks base method.
func (m *MockStreamConsumerManager) PauseConsumer(ctx context.Context, stream, consumer string, pauseUntil time.Time) (*jetstream.ConsumerPauseResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PauseConsumer", ctx, stream, consumer, pauseUntil)
	ret0, _ := ret[0].(*jetstream.ConsumerPauseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PauseConsumer indicates an expected call of PauseConsumer.
func (mr *MockStreamConsumerManagerMockRecorder) PauseConsumer(ctx, stream, consumer, pauseUntil any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PauseConsumer", reflect.TypeOf((*MockStreamConsumerManager)(nil).PauseConsumer), ctx, stream, consumer, pauseUntil)
}

// PushConsumer mocks base method.
func (m *MockStreamConsumerManager) PushConsumer(ctx context.Context, stream, consumer string) (jetstream.PushConsumer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PushConsumer", ctx, stream, consumer)
	ret0, _ := ret[0].(jetstream.PushConsumer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PushConsumer indicates an expected call of PushConsumer.
func (mr *MockStreamConsumerManagerMockRecorder) PushConsumer(ctx, stream, consumer any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PushConsumer", reflect.TypeOf((*MockStreamConsumerManager)(nil).PushConsumer), ctx, stream, consumer)
}

// ResumeConsumer mocks base method.
func (m *MockStreamConsumerManager) ResumeConsumer(ctx context.Context, stream, consumer string) (*jetstream.ConsumerPauseResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResumeConsumer", ctx, stream, consumer)
	ret0, _ := ret[0].(*jetstream.ConsumerPauseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResumeConsumer indicates an expected call of ResumeConsumer.
func (mr *MockStreamConsumerManagerMockRecorder) ResumeConsumer(ctx, stream, consumer any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResumeConsumer", reflect.TypeOf((*MockStreamConsumerManager)(nil).ResumeConsumer), ctx, stream, consumer)
}

// UpdateConsumer mocks base method.
func (m *MockStreamConsumerManager) UpdateConsumer(ctx context.Context, stream string, cfg jetstream.ConsumerConfig) (jetstream.Consumer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateConsumer", ctx, stream, cfg)
	ret0, _ := ret[0].(jetstream.Consumer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateConsumer indicates an expected call of UpdateConsumer.
func (mr *MockStreamConsumerManagerMockRecorder) UpdateConsumer(ctx, stream, cfg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConsumer", reflect.TypeOf((*MockStreamConsumerManager)(nil).UpdateConsumer), ctx, stream, cfg)
}

// UpdatePushConsumer mocks base method.
func (m *MockStreamConsumerManager) UpdatePushConsumer(ctx context.Context, stream string, cfg jetstream.ConsumerConfig) (jetstream.PushConsumer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePushConsumer", ctx, stream, cfg)
	ret0, _ := ret[0].(jetstream.PushConsumer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePushConsumer indicates an expected call of UpdatePushConsumer.
func (mr *MockStreamConsumerManagerMockRecorder) UpdatePushConsumer(ctx, stream, cfg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePushConsumer", reflect.TypeOf((*MockStreamConsumerManager)(nil).UpdatePushConsumer), ctx, stream, cfg)
}

// MockStreamInfoLister is a mock of StreamInfoLister interface.
type MockStreamInfoLister struct {
	ctrl     *gomock.Controller
	recorder *MockStreamInfoListerMockRecorder
}

// MockStreamInfoListerMockRecorder is the mock recorder for MockStreamInfoLister.
type MockStreamInfoListerMockRecorder struct {
	mock *MockStreamInfoLister
}

// NewMockStreamInfoLister creates a new mock instance.
func NewMockStreamInfoLister(ctrl *gomock.Controller) *MockStreamInfoLister {
	mock := &MockStreamInfoLister{ctrl: ctrl}
	mock.recorder = &MockStreamInfoListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStreamInfoLister) EXPECT() *MockStreamInfoListerMockRecorder {
	return m.recorder
}

// Err mocks base method.
func (m *MockStreamInfoLister) Err() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err.
func (mr *MockStreamInfoListerMockRecorder) Err() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockStreamInfoLister)(nil).Err))
}

// Info mocks base method.
func (m *MockStreamInfoLister) Info() <-chan *jetstream.StreamInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Info")
	ret0, _ := ret[0].(<-chan *jetstream.StreamInfo)
	return ret0
}

// Info indicates an expected call of Info.
func (mr *MockStreamInfoListerMockRecorder) Info() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockStreamInfoLister)(nil).Info))
}

// MockStreamNameLister is a mock of StreamNameLister interface.
type MockStreamNameLister struct {
	ctrl     *gomock.Controller
	recorder *MockStreamNameListerMockRecorder
}

// MockStreamNameListerMockRecorder is the mock recorder for MockStreamNameLister.
type MockStreamNameListerMockRecorder struct {
	mock *MockStreamNameLister
}

// NewMockStreamNameLister creates a new mock instance.
func NewMockStreamNameLister(ctrl *gomock.Controller) *MockStreamNameLister {
	mock := &MockStreamNameLister{ctrl: ctrl}
	mock.recorder = &MockStreamNameListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStreamNameLister) EXPECT() *MockStreamNameListerMockRecorder {
	return m.recorder
}

// Err mocks base method.
func (m *MockStreamNameLister) Err() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err.
func (mr *MockStreamNameListerMockRecorder) Err() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockStreamNameLister)(nil).Err))
}

// Name mocks base method.
func (m *MockStreamNameLister) Name() <-chan string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(<-chan string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockStreamNameListerMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockStreamNameLister)(nil).Name))
}
