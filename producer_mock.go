// Code generated by MockGen. DO NOT EDIT.
// Source: producer.go
//
// Generated by this command:
//
//	mockgen -source=producer.go -package=nats -destination=producer_mock.go
//

// Package nats is a generated GoMock package.
package nats

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockProducerNats is a mock of ProducerNats interface.
type MockProducerNats struct {
	ctrl     *gomock.Controller
	recorder *MockProducerNatsMockRecorder
}

// MockProducerNatsMockRecorder is the mock recorder for MockProducerNats.
type MockProducerNatsMockRecorder struct {
	mock *MockProducerNats
}

// NewMockProducerNats creates a new mock instance.
func NewMockProducerNats(ctrl *gomock.Controller) *MockProducerNats {
	mock := &MockProducerNats{ctrl: ctrl}
	mock.recorder = &MockProducerNatsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProducerNats) EXPECT() *MockProducerNatsMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockProducerNats) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockProducerNatsMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockProducerNats)(nil).Close))
}

// ProduceBytes mocks base method.
func (m *MockProducerNats) ProduceBytes(ctx context.Context, subject string, data []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProduceBytes", ctx, subject, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProduceBytes indicates an expected call of ProduceBytes.
func (mr *MockProducerNatsMockRecorder) ProduceBytes(ctx, subject, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProduceBytes", reflect.TypeOf((*MockProducerNats)(nil).ProduceBytes), ctx, subject, data)
}

// ProduceJSON mocks base method.
func (m *MockProducerNats) ProduceJSON(ctx context.Context, subject string, v any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProduceJSON", ctx, subject, v)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProduceJSON indicates an expected call of ProduceJSON.
func (mr *MockProducerNatsMockRecorder) ProduceJSON(ctx, subject, v any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProduceJSON", reflect.TypeOf((*MockProducerNats)(nil).ProduceJSON), ctx, subject, v)
}

// ProduceJSONAsync mocks base method.
func (m *MockProducerNats) ProduceJSONAsync(subject string, v any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProduceJSONAsync", subject, v)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProduceJSONAsync indicates an expected call of ProduceJSONAsync.
func (mr *MockProducerNatsMockRecorder) ProduceJSONAsync(subject, v any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProduceJSONAsync", reflect.TypeOf((*MockProducerNats)(nil).ProduceJSONAsync), subject, v)
}
