// Code generated by MockGen. DO NOT EDIT.
// Source: fallback.go
//
// Generated by this command:
//
//	mockgen -source=fallback.go -package=nats -destination=fallback_mock.go
//

// Package nats is a generated GoMock package.
package nats

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockFallback is a mock of Fallback interface.
type MockFallback struct {
	ctrl     *gomock.Controller
	recorder *MockFallbackMockRecorder
}

// MockFallbackMockRecorder is the mock recorder for MockFallback.
type MockFallbackMockRecorder struct {
	mock *MockFallback
}

// NewMockFallback creates a new mock instance.
func NewMockFallback(ctrl *gomock.Controller) *MockFallback {
	mock := &MockFallback{ctrl: ctrl}
	mock.recorder = &MockFallbackMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFallback) EXPECT() *MockFallbackMockRecorder {
	return m.recorder
}

// SaveMessage mocks base method.
func (m *MockFallback) SaveMessage(ctx context.Context, subject string, msg []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveMessage", ctx, subject, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveMessage indicates an expected call of SaveMessage.
func (mr *MockFallbackMockRecorder) SaveMessage(ctx, subject, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveMessage", reflect.TypeOf((*MockFallback)(nil).SaveMessage), ctx, subject, msg)
}
