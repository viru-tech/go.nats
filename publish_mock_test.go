// Code generated by MockGen. DO NOT EDIT.
// Source: ./vendor/github.com/nats-io/nats.go/jetstream/publish.go
//
// Generated by this command:
//
//	mockgen -source=./vendor/github.com/nats-io/nats.go/jetstream/publish.go -imports=publish=github.com/nats-io/nats.go/publish -package=nats -mock_names=JetStream=MockPublish -destination=publish_mock_test.go
//

// Package nats is a generated GoMock package.
package nats

import (
	reflect "reflect"

	nats_go "github.com/nats-io/nats.go"
	jetstream "github.com/nats-io/nats.go/jetstream"
	gomock "go.uber.org/mock/gomock"
)

// MockPubAckFuture is a mock of PubAckFuture interface.
type MockPubAckFuture struct {
	ctrl     *gomock.Controller
	recorder *MockPubAckFutureMockRecorder
}

// MockPubAckFutureMockRecorder is the mock recorder for MockPubAckFuture.
type MockPubAckFutureMockRecorder struct {
	mock *MockPubAckFuture
}

// NewMockPubAckFuture creates a new mock instance.
func NewMockPubAckFuture(ctrl *gomock.Controller) *MockPubAckFuture {
	mock := &MockPubAckFuture{ctrl: ctrl}
	mock.recorder = &MockPubAckFutureMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPubAckFuture) EXPECT() *MockPubAckFutureMockRecorder {
	return m.recorder
}

// Err mocks base method.
func (m *MockPubAckFuture) Err() <-chan error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(<-chan error)
	return ret0
}

// Err indicates an expected call of Err.
func (mr *MockPubAckFutureMockRecorder) Err() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockPubAckFuture)(nil).Err))
}

// Msg mocks base method.
func (m *MockPubAckFuture) Msg() *nats_go.Msg {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Msg")
	ret0, _ := ret[0].(*nats_go.Msg)
	return ret0
}

// Msg indicates an expected call of Msg.
func (mr *MockPubAckFutureMockRecorder) Msg() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Msg", reflect.TypeOf((*MockPubAckFuture)(nil).Msg))
}

// Ok mocks base method.
func (m *MockPubAckFuture) Ok() <-chan *jetstream.PubAck {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ok")
	ret0, _ := ret[0].(<-chan *jetstream.PubAck)
	return ret0
}

// Ok indicates an expected call of Ok.
func (mr *MockPubAckFutureMockRecorder) Ok() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ok", reflect.TypeOf((*MockPubAckFuture)(nil).Ok))
}
